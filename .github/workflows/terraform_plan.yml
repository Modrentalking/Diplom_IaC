name: 'Terraform Plan'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Использовать оболочку Bash, независимо от того, является ли GitHub Actions runner ubuntu-latest, macos-latest или windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Проверка репозитория на GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Установка последней версии Terraform CLI и настройка файла конфигурации Terraform CLI с помощью токена пользователя Terraform Cloud
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Setup GCP credentianls
      run: |-
        echo "${{ secrets.STATE }}" > ./state.json
        echo "${{ secrets.CLUSTER }}" > ./cluster.json

    
    - name: Setup terraform variables
      id: vars
      run: |-
        cat > pipeline.auto.tfvars <<EOF
        region="${{ vars.GCP_REGION }}" 
        project="${{ vars.GCP_PROJECT }}" 
        clusterName="${{ vars.CLUSTER_NAME }}"
        EOF
    
   

    - name: Terraform Init
      run: |-
          terraform init \
          -backend-config=state.json \
          -backend-config=cluster.json
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.STATE }} 
  
      # Генерация плана выполнения для Terraform с использованием разных наборов учетных данных
    - name: Terraform Plan
      run: |-
          terraform plan \
          -var-file=pipeline.auto.tfvars \
          -input=false